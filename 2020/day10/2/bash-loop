#!/bin/bash

inFile="${1}"

function debug() {
  echo "${@}" >&2
}

steps=( 0 $( cat "${inFile}" | sort -n ) )
goal=$( cat "${inFile}" | sort -n | tail -n 1 )
goal=$(( goal + 3 ))
steps[${#steps[@]}]=${goal}
numSteps=${#steps[@]}
declare -a pathsFrom
debug "Setting pathsFrom[$((numSteps-1))]=0"
pathsFrom[$((numSteps-1))]=1

# Walk the list in reverse order
for index in $( seq 0 $((numSteps-2)) | tac ); do
  debug "Calculating paths from index ${index}"
  pathsFromHere=0
  x=0
  while true; do
    # Gotta move at least 1 position
    x=$(( x+1 ))

    # Check if we could step to tmpIndex (x positions forward) from here
    tmpIndex=$(( index+x ))

    # We can't read past the end of the list
    [[ ${tmpIndex} -ge ${numSteps} ]] && break

    # If the difference is >3 jolts, it's an invalid move
    joltDiff=$(( ${steps[${tmpIndex}]} - ${steps[${index}]} ))
    [[ ${joltDiff} -gt 3 ]] && break

    # There's a position to move to, and it's valid
    # So, add those paths to our potential paths
    pathsFromHere=$(( pathsFromHere + ${pathsFrom[${tmpIndex}]} ))
  done
  debug "Setting pathsFrom[${index}]=${pathsFromHere}"
  pathsFrom[${index}]=${pathsFromHere}
done


echo "${pathsFrom[0]}"
