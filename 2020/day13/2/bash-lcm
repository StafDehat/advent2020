#!/bin/bash

inFile="${1}"

#myStart=$( head -n 1 "${inFile}" | grep -Po '\d+' )
declare -a departures
departures=( $( grep ',' ${inFile} |
                  grep -Po '(\d+|x),?' |
                  tr -d ',' ) )

function debug() {
  local ts=$( date +"%F %T.%N" )
  echo -e "${ts}: ${@}" >&2
}

function gcd() {
  if (( ${2} == 0 )); then
    echo 0; return
  fi
  if (( ${1} % ${2} == 0)); then
    echo ${2}
    return
  fi
  gcd ${2} $(( ${1} % ${2} ))
}
alias gcf=gcd

function lcm() {
  if (( ${2} == 0 )); then
    echo 0; return
  fi
  if (( ${#} == 2 )); then
    echo $(( ${1} * ${2} / $( gcd ${1} ${2} ) ))
    return
  elif (( ${#} <= 1 )); then
    echo ${1}
    return
  fi
  local a=${1}
  shift 1
  lcm ${a} $( lcm ${@} )
}
alias lcf=lcm


# Indexed by busID, offsets from t=0
declare -a offsets
index=0
for busId in ${departures[@]}; do
  debug "t+${index}:\t${busId}"
  [[ "${busId}" != "x" ]] && offsets[${busId}]=${index}
  index=$(( index+1 ))
done
debug "Minutes modded by: ${#departures[@]}"


# Whatever bus departs at t=0, the solution will be a multiple of that
tZeroBus=${departures[0]}
debug "Solution must be a multiple of ${tZeroBus}"

incr=1
t=0
while true; do
  t=$(( t + incr ))
  #debug "Testing t=${t}"
  for busId in "${departures[@]}"; do
    # "x" is just ignored - skip it
    [[ "${busId}" == "x" ]] && continue
    # If the offset for busId is correct, update incr so we only increase
    #   by shared multiples, to avoid breaking the already-solved stuff.
    if [[ $(( ( t+${offsets[${busId}]} ) % busId )) -eq 0 ]]; then
      #debug "Bus ${busId} would leave at the correct time."
      incr=$( lcm ${incr} ${busId} )
      debug "Solution must be a multiple of ${incr}"
    else
      # BusID doesn't jive with this time interval - no sense trying the others
      continue 2
    fi
  done # End BusID loop
  break
done # End 't' loop

echo "Pattern correct at t=${t}"
