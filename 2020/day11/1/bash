#!/bin/bash

inFile="${1}"

#
# Read input - build the "plane" layout
declare -A planeState
numCols=$( head -n 1 "${inFile}" | tr -d '\n' | wc -c )
numRows=$( wc -l < "${inFile}" )
colNum=0
rowNum=0
while read LINE; do
  colNum=0
  while read -n1 char; do
    planeState[${colNum},${rowNum}]="${char}"
    colNum=$((colNum+1))
  done <<<"${LINE}"
  rowNum=$((rowNum+1))
done < <( cat "${inFile}" )


#------------------#
# Helper functions #
#------------------#

#
# Print args to stderr
function debug() {
  local ts=$( date +"%F %T.%N" )
  echo "${ts}: ${@}" >&2
}

#
# Display the plane's current state
function printPlane() {
  for ((y=0;y<numRows;y++)) do
    for ((x=0;x<numCols;x++)) do
      echo -n "${planeState[$x,$y]}"
    done
    echo
  done
}

#
# Take a seat's coords, and return a list of neighbours' coords
function getNeighbours() {
  local xPos="${1}"
  local yPos="${2}"

  for x in $(seq $((xPos-1)) $((xPos+1))); do
    # Don't read outside the plane
    [[ "${x}" -lt 0 ]] && continue
    [[ "${x}" -ge "${numCols}" ]] && continue
    for y in $(seq $((yPos-1)) $((yPos+1))); do
      # Don't read outside the plane
      [[ "${y}" -lt 0 ]] && continue
      [[ "${y}" -ge "${numRows}" ]] && continue
      # I'm not my own neighbour:
      if [[ "${y}" -eq "${yPos}" ]] &&
         [[ "${x}" -eq "${xPos}" ]]; then
        continue
      fi
      # Floors don't really count as neighbours
      if [[ "${planeState[${x},${y}]}" == '.' ]]; then
        continue
      fi
      echo "${x} ${y}"
    done
  done
}

#
# Take a seat's coords, return whether it's empty or not
# "Floor" spaces are considered empty.
function isOccupied() {
  local xPos="${1}"
  local yPos="${2}"
  case "${planeState[${xPos},${yPos}]}" in
    'L') return 1;;
    '#') return 0;;
    '.') return 1;;
  esac
  return 2
}

#
# Given a seat's coords, return how many neighbouring seats are occupied
function countOccupiedNeighbours() {
  local xPos="${1}"
  local yPos="${2}"
  local neighbourCoords="$( getNeighbours "${xPos}" "${yPos}" )"
  local occupiedNeighbours=0
  while read x y; do
    if isOccupied "${x}" "${y}"; then
      occupiedNeighbours=$(( occupiedNeighbours+1 ))
    fi
  done <<<"${neighbourCoords}"
  echo "${occupiedNeighbours}"
}

#
# Given a seat's coords, figure out its next state
function getNextState() {
  local xPos="${1}"
  local yPos="${2}"
  local oldState="${planeState[${xPos},${yPos}]}"

  case "${oldState}" in
    'L') # Empty seat logic
      # If a seat is empty (L) and there are no occupied
      #   seats adjacent to it, the seat becomes occupied.
      if [[ $(countOccupiedNeighbours ${xPos} ${yPos}) -eq 0 ]]; then
        echo '#'
      else
        echo 'L'
      fi
    ;;
    '#') # Occupied seat logic
      # If a seat is occupied (#) and four or more seats
      #    adjacent to it are also occupied, the seat
      #    becomes empty.
      if [[ $(countOccupiedNeighbours ${xPos} ${yPos}) -ge 4 ]]; then
        echo 'L'
      else
        echo '#'
      fi
    ;;
    '.') # Floors will always be floors
      echo "${oldState}"
    ;;
  esac

  # Occupied seat logic:
}

#
# Copy nextPlaneState into planeState
function changeSeats() {
  for ((y=0;y<numRows;y++)) do
    for ((x=0;x<numCols;x++)) do
      planeState[${x},${y}]=${nextPlaneState[${x},${y}]}
    done
  done
}


#----------------#
#---Core logic---#
#----------------#

debug "Num Rows: ${numRows}"
debug "Num Cols: ${numCols}"

declare -A nextPlaneState
while true; do
  debug "Current state of plane:"
  printPlane

  # Have each seat figure out its next state
  # Note: This could be parallelized
  seatsChanging="False"
  for ((y=0;y<numRows;y++)) do
    for ((x=0;x<numCols;x++)) do
      nextState=$( getNextState ${x} ${y} )
      nextPlaneState[${x},${y}]=${nextState}
      if [[ "${planeState[${x},${y}]}" != "${nextState}" ]]; then
        seatsChanging="True"
      fi
    done
  done

  # If no seats want to change, we're stable - exit the loop
  if [[ "${seatsChanging}" == "False" ]]; then
    break
  fi

  # Any seat that wants to change, should do so now:
  changeSeats
done


occupiedSeats=0
for ((y=0;y<numRows;y++)) do
  for ((x=0;x<numCols;x++)) do
    if [[ "${planeState[${x},${y}]}" == "#" ]]; then
      occupiedSeats=$(( occupiedSeats + 1 ))
    fi
  done
done

echo "Total occupied: ${occupiedSeats}"
